use crate::ast::*;

grammar;

pub Program: Program = Declaration* => Program { declarations: <> };

Declaration: Declaration = {
    ControlDecl => Declaration::Control(<>),
    ConstantDecl => Declaration::Constant(<>)
};

ControlDecl: ControlDecl =
    "control" <name:Identifier> "(" <params:Comma<Param>> ")"
        "{" <local_decls:ControlLocalDecl*> "apply" <apply_body:BlockStatement> "}"
    => ControlDecl { name, params, local_decls, apply_body };

ControlLocalDecl: ControlLocalDecl = {
    VariableDecl => ControlLocalDecl::Variable(<>),
    Instantiation => ControlLocalDecl::Instantiation(<>),
    ConstantDecl => ControlLocalDecl::Constant(<>),
    ActionDecl => ControlLocalDecl::Action(<>)
};

ActionDecl: ActionDecl = "action" <name:Identifier> "(" <params:Comma<Param>> ")" <body:BlockStatement>
    => ActionDecl { name, params, body };

Param: Param = <direction:Direction> <ty:TypeRef> <name:Identifier>
    => Param { direction, ty, name };

Statement: Statement = {
    BlockStatement => Statement::Block(<>),
    IfStatement => Statement::If(<>),
    Assignment => Statement::Assignment(<>)
};

StatementOrDecl: StatementOrDecl = {
    Statement => StatementOrDecl::Statement(<>),
    VariableDecl => StatementOrDecl::VariableDecl(<>),
    ConstantDecl => StatementOrDecl::ConstantDecl(<>),
    Instantiation => StatementOrDecl::Instantiation(<>)
};

BlockStatement: BlockStatement = "{" <StatementOrDecl*> "}" => BlockStatement(<>);

Instantiation: Instantiation = <ty:TypeRef> "(" ")" <name:Identifier> ";" => Instantiation { ty, name };

VariableDecl: VariableDecl = {
    <ty:TypeRef> <name:Identifier> <value:("=" <Expr>)?> ";" => VariableDecl { ty, name, value },
};

ConstantDecl: ConstantDecl = "const" <ty:TypeRef> <name:Identifier> "=" <value:Expr> ";"
    => ConstantDecl { ty, name, value };

Assignment: Assignment = <name:Identifier> "=" <value:Expr> ";"
    => Assignment { name, value };

IfStatement: IfStatement = {
    // To avoid ambiguity, only allow block statements in then/else
    "if" "(" <condition:Expr> ")" <then_case:BlockStatement> <else_case:("else" <BlockStatement>)?>
        => IfStatement { condition, then_case, else_case }
};

Expr: Expr = {
    <left:Expr> "||" <right:FactorExpr> => Expr::Or(Box::new(left), Box::new(right)),
    FactorExpr
};

FactorExpr: Expr = {
    <left:FactorExpr> "&&" <right:TerminalExpr> => Expr::And(Box::new(left), Box::new(right)),
    "!" <TerminalExpr> => Expr::Negation(Box::new(<>)),
    TerminalExpr
};

TerminalExpr: Expr = {
    Bool => Expr::Bool(<>),
    Identifier => Expr::Var(<>),
    "(" <Expr> ")"
};

Bool: bool = {
    "true" => true,
    "false" => false
};

Direction: Direction = {
    "in" => Direction::In,
    "out" => Direction::Out,
    "inout" => Direction::InOut
};

// Treat types as identifiers for simplicity
TypeRef = Identifier;

Identifier: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();

// File path, must contain a period
Path: String = r"[a-zA-Z0-9_.]+\.[a-zA-Z0-9_]+" => <>.to_string();

// Allows trailing element
Comma<T>: Vec<T> = {
   <mut v:(<T> ",")*> <e:T?> => {
       v.extend(e);
       v
   }
};
